"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[459],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||o;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8215:function(e,t,n){var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return u}});var a=n(7462),r=n(7294),o=n(2389),l=n(9443);var i=function(){var e=(0,r.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=n(9521),c=n(6010),d="tabItem_vU9c";function p(e){var t,n,a,o=e.lazy,l=e.block,p=e.defaultValue,u=e.values,m=e.groupId,h=e.className,g=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=u?u:g.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),k=(0,s.lx)(v,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===p?p:null!=(t=null!=p?p:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=g[0])?void 0:a.props.value;if(null!==y&&!v.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=i(),f=b.tabGroupChoices,N=b.setTabGroupChoices,w=(0,r.useState)(y),x=w[0],T=w[1],S=[],C=(0,s.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var E=f[m];null!=E&&E!==x&&v.some((function(e){return e.value===E}))&&T(E)}var j=function(e){var t=e.currentTarget,n=S.indexOf(t),a=v[n].value;a!==x&&(C(t),T(a),null!=m&&N(m,a))},L=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=S.indexOf(e.currentTarget)+1;n=S[a]||S[0];break;case"ArrowLeft":var r=S.indexOf(e.currentTarget)-1;n=S[r]||S[S.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":l},h)},v.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,className:(0,c.Z)("tabs__item",d,{"tabs__item--active":x===t}),key:t,ref:function(e){return S.push(e)},onKeyDown:L,onFocus:j,onClick:j},null!=n?n:t)}))),o?(0,r.cloneElement)(g.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},g.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function u(e){var t=(0,o.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},9443:function(e,t,n){var a=(0,n(7294).createContext)(void 0);t.Z=a},3212:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return u},default:function(){return h}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=n(6396),i=n(8215),s=["components"],c={sidebar_position:1},d="WorldQL 101 - A Chatroom and Shared Canvas over Websockets in the Browser",p={unversionedId:"example-projects/chat-room",id:"example-projects/chat-room",isDocsHomePage:!1,title:"WorldQL 101 - A Chatroom and Shared Canvas over Websockets in the Browser",description:"Use WorldQL to build a simple chat room where you can see the cursors of other users. Source code for this project can be found at https://github.com/WorldQL/web-examples",source:"@site/docs/example-projects/chat-room.md",sourceDirName:"example-projects",slug:"/example-projects/chat-room",permalink:"/example-projects/chat-room",editUrl:"https://github.com/WorldQL/docs.worldql.com/tree/trunk/docs/example-projects/chat-room.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"TypeScript",permalink:"/client-libraries/typescript"},next:{title:"ZeroMQ Handshake",permalink:"/protocol/zeromq-handshake"}},u=[{value:"Setup and Prerequisites",id:"setup-and-prerequisites",children:[],level:2},{value:"Syncing Chat",id:"syncing-chat",children:[{value:"Extension Tasks",id:"extension-tasks",children:[],level:3}],level:2},{value:"Syncing Cursors",id:"syncing-cursors",children:[],level:2}],m={toc:u};function h(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"worldql-101---a-chatroom-and-shared-canvas-over-websockets-in-the-browser"},"WorldQL 101 - A Chatroom and Shared Canvas over Websockets in the Browser"),(0,o.kt)("p",null,"Use WorldQL to build a simple chat room where you can see the cursors of other users. Source code for this project can be found at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/WorldQL/web-examples"},"https://github.com/WorldQL/web-examples")),(0,o.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Work in progress!")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"We're hard at work building. Documentation on this example project is still a work in progress and subject to change!"))),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Want more general examples? Check out the ",(0,o.kt)("a",{parentName:"p",href:"/client-libraries/typescript"},"TypeScript Client")," page for setup\ninstructions and smaller example code snippets."))),(0,o.kt)("h2",{id:"setup-and-prerequisites"},"Setup and Prerequisites"),(0,o.kt)("p",null,"Please refer to the ",(0,o.kt)("a",{parentName:"p",href:"/client-libraries/typescript#installation-and-setup"},"TypeScript Client Library")," page\nfor information on how to setup the client."),(0,o.kt)("p",null,"To follow along, you will need a WorldQL server instance. For development, running locally and accessing via ",(0,o.kt)("inlineCode",{parentName:"p"},"localhost"),"\nis fine. However on production websites you will need to expose the WorldQL WebSocket to the internet and ensure everything\nis setup correctly. This kind of production scale setup is out of the scope of this article however."),(0,o.kt)("h2",{id:"syncing-chat"},"Syncing Chat"),(0,o.kt)("p",null,"A chatroom has two requirements, to send messages out to other clients, and to receive messages from other clients. WorldQL acts as\nthe message broker and ensures every client can talk to each other."),(0,o.kt)("p",null,"To start, you will need some way for the user to interact with your application; a textbox for writing messages and a button for sending."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},"<input type='text' id='text-input' />\n<button type='button' id='text-send'>SEND</button>\n")),(0,o.kt)("p",null,"Next you will need to add references in your JS/TS module. If you don't have a JS/TS entrypoint simply add a\n",(0,o.kt)("inlineCode",{parentName:"p"},"<script type='module'><\/script>")," tag."),(0,o.kt)(l.Z,{defaultValue:"TypeScript",groupId:"codetabs-TypeScript-JavaScript",values:[{label:"TypeScript",value:"TypeScript"},{label:"JavaScript",value:"JavaScript"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"TypeScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const input = document.getElementById('text-input') as HTMLInputElement\nconst button = document.getElementById('text-send') as HTMLButtonElement\n"))),(0,o.kt)(i.Z,{value:"JavaScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/** @type {HTMLInputElement} */\nconst input = document.getElementById('text-input')\n/** @type {HTMLButtonElement} */\nconst button = document.getElementById('text-send')\n")))),(0,o.kt)("p",null,"From there you will need to add an event listener to the button to detect clicks. This will then read and clear the text in the input\ntextbox, and pass the text through WorldQL to other clients."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// On SEND clicked\nbutton.addEventListener('click', () => {\n  // Read input text\n  const text = input.value\n\n  // Clear input text\n  input.value = ''\n\n  // ...\n})\n")),(0,o.kt)("p",null,"Next we will need to interact with WorldQL using the client."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Client } from '@worldql/client'\n\n// Ensure your WS URL is correct\nconst client = new WorldQLClient({ url: 'ws://localhost:8080' })\nclient.connect()\n")),(0,o.kt)("p",null,"You will need to wait for the client to connect to WorldQL before attempting to send any data. Luckily the client will emit an event\nwhen it is connected and ready! It also has a read-only boolean property named ",(0,o.kt)("inlineCode",{parentName:"p"},"ready")," that you can check at any time."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Attempting to send messages via the client before it is ready will result in the client throwing an Error."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Subscribe to `ready` event\nclient.on('ready', () => {\n  // ... handle ready ...\n})\n\n// Check ready property\nconst isReady = client.ready\n")),(0,o.kt)("p",null,"You could use this ready event to control the ",(0,o.kt)("inlineCode",{parentName:"p"},"disabled")," state of the input textbox and send button to stop users from being able\nto interact with them before the client is ready."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Disable inputs on page load\ninput.disabled = true\nbutton.disabled = true\n\n// Enable inputs once client is ready\nclient.on('ready', () => {\n  input.disabled = false\n  button.disabled = false\n})\n")),(0,o.kt)("p",null,"Now that the client is connected and ready to send messages, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"client")," object to send a global message. You can use\nyour IDE to inspect the arguments to ",(0,o.kt)("inlineCode",{parentName:"p"},"globalMessage()"),", but for the sake of this example project we will go over them one by one."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Required"),(0,o.kt)("th",{parentName:"tr",align:null},"Usage"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"worldName")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null},"Yes"),(0,o.kt)("td",{parentName:"tr",align:null},"World to send message to")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"replication")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"enum")),(0,o.kt)("td",{parentName:"tr",align:null},"No"),(0,o.kt)("td",{parentName:"tr",align:null},"Replication strategy")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"payload")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"object")),(0,o.kt)("td",{parentName:"tr",align:null},"No"),(0,o.kt)("td",{parentName:"tr",align:null},"Optional extra payload, replicated to any listening clients")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"payload.parameter")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null},"No"),(0,o.kt)("td",{parentName:"tr",align:null},"Arbitrary string value")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"payload.flex")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array"},(0,o.kt)("inlineCode",{parentName:"a"},"Uint8Array"))),(0,o.kt)("td",{parentName:"tr",align:null},"No"),(0,o.kt)("td",{parentName:"tr",align:null},"Arbitrary binary data")))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"payload")," object is used to send arbitrary data to other clients, usually application state of some form. The ",(0,o.kt)("inlineCode",{parentName:"p"},"parameter"),"\npayload is a simple string, which can be used to encode instructions or simple data. The ",(0,o.kt)("inlineCode",{parentName:"p"},"flex")," payload is binary, meaning it\ncan take any data as an input. This could be a complex packed binary representation of your application state, or it could simply\nbe UTF8 encoded JSON; the choice is left entirely up to the user."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Replication } from '@worldql/client'\n\n// On SEND clicked\nbutton.addEventListener('click', () => {\n  const text = input.value\n  input.value = ''\n  // ... code above is from before\n\n  // Ensure the client is ready, otherwise return early\n  if (!client.ready) return\n\n  // Send global message with the text as a payload\n  // Use replication strategy of ExceptSelf to send to all other clients\n  client.globalMessage('chat', Replication.ExceptSelf, { parameter: text })\n})\n")),(0,o.kt)("p",null,"Now that we are setup to send messages, we need to handle the other end and receive messages. The WorldQL client is an event emitter, so\nall you need to do is subscribe to the ",(0,o.kt)("inlineCode",{parentName:"p"},"globalMessage")," event. If you are sending/receiving to/from multiple worlds then you will need\nto remember to filter based on the incoming ",(0,o.kt)("inlineCode",{parentName:"p"},"worldName")," parameter, but for this example we are only using the one world so this isn't\nstrictly necessary."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Subscribe to global messages\nclient.on('globalMessage', (senderUuid, worldName, { parameter }) => {\n  // Filter out messages from other worlds\n  if (worldName !== 'chat') return\n\n  // ... handle incoming message ...\n})\n")),(0,o.kt)("p",null,"However, this won't work just yet. WorldQL only passes messages to clients which have subscribed to a world, or areas inside a world in\nthe case of local messages. To receive global messages, you must subscribe to at least one region in a world."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Subscribe to origin region\nclient.areaSubscribe('world', { x: 0, y: 0, z: 0 })\n")),(0,o.kt)("p",null,"Once we are subscribed to the world, we will need to actually process the incoming messages. For this example, we will store the message\ncontent and sender UUID in an array of tuples and then printing the array to the console. We won't go over displaying the messages in the\nDOM, as that has been left as an extension task for you to complete yourself."),(0,o.kt)(l.Z,{defaultValue:"TypeScript",groupId:"codetabs-TypeScript-JavaScript",values:[{label:"TypeScript",value:"TypeScript"},{label:"JavaScript",value:"JavaScript"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"TypeScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// Define an array to store messages\nconst messages: Array<[uuid: string, text: string]> = []\n\nbutton.addEventListener('click', () => {\n  const text = input.value\n  input.value = ''\n  \n  if (!client.ready) return\n  client.globalMessage('chat', { parameter: text })\n  // ... code above is from before\n\n  // Store own message in array\n  messages.push([client.uuid, text])\n\n  // Print outgoing message to console\n  console.log(`> ${senderUuid}: ${parameter}`)\n})\n\nclient.on('globalMessage', (senderUuid, worldName, { parameter }) => {\n  if (worldName !== 'chat') return\n  // ... code above is from before\n\n  // Store message in array\n  messages.push([senderUuid, parameter])\n\n  // Print incoming message to console\n  console.log(`< ${senderUuid}: ${parameter}`)\n})\n"))),(0,o.kt)(i.Z,{value:"JavaScript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Define an array to store messages\n/** @type {Array<[uuid: string, text: string]>} */\nconst messages = []\n\nbutton.addEventListener('click', () => {\n  const text = input.value\n  input.value = ''\n  \n  if (!client.ready) return\n  client.globalMessage('chat', { parameter: text })\n  // ... code above is from before\n\n  // Store own message in array\n  messages.push([client.uuid, text])\n\n  // Print outgoing message to console\n  console.log(`> ${senderUuid}: ${parameter}`)\n})\n\nclient.on('globalMessage', (senderUuid, worldName, { parameter }) => {\n  if (worldName !== 'chat') return\n  // ... code above is from before\n\n  // Store message in array\n  messages.push([senderUuid, parameter])\n\n  // Print incoming message to console\n  console.log(`< ${senderUuid}: ${parameter}`)\n})\n")))),(0,o.kt)("p",null,"At this point you should have a fully functioning chat example. It isn't pretty and the only way to see chat messages is by opening the\nJavaScript console, but it does work as expected. If you are feeling ambitious, take a look at the extension tasks below. These are\npointers on how you can extend this example project to a more functional real-world application."),(0,o.kt)("h3",{id:"extension-tasks"},"Extension Tasks"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Make UI for the user to set their own username"),(0,o.kt)("li",{parentName:"ul"},"Pass both the username and message text to WorldQL"),(0,o.kt)("li",{parentName:"ul"},"Display the username and text in the HTML DOM"),(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"peerConnect")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"peerDisconnect")," events to display every connected client"),(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"peerConnect")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"peerDisconnect")," events to display messages when a client joins/leaves the chatroom")),(0,o.kt)("h2",{id:"syncing-cursors"},"Syncing Cursors"),(0,o.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Coming Soon")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This section of the documentation is coming soon!"))))}h.isMDXComponent=!0}}]);